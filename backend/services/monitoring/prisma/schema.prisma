generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Server {
  id          String   @id @default(cuid())
  name        String
  hostname    String   @unique
  ipAddress   String
  port        Int      @default(22)
  status      ServerStatus @default(UNKNOWN)
  lastSeen    DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  metrics     Metric[]
  alerts      Alert[]
  healthChecks HealthCheck[]
  
  @@map("servers")
}

model Metric {
  id        String     @id @default(cuid())
  serverId  String
  type      MetricType
  value     Float
  unit      String
  timestamp DateTime   @default(now())
  
  // Relations
  server    Server     @relation(fields: [serverId], references: [id], onDelete: Cascade)
  
  @@map("metrics")
  @@index([serverId, type, timestamp])
}

model Alert {
  id          String      @id @default(cuid())
  serverId    String
  type        AlertType
  severity    AlertSeverity
  message     String
  threshold   Float?
  currentValue Float?
  status      AlertStatus @default(ACTIVE)
  createdAt   DateTime    @default(now())
  resolvedAt  DateTime?
  
  // Relations
  server      Server      @relation(fields: [serverId], references: [id], onDelete: Cascade)
  
  @@map("alerts")
}

model HealthCheck {
  id        String           @id @default(cuid())
  serverId  String
  status    HealthStatus
  response  Json?
  latency   Int?             // in milliseconds
  error     String?
  timestamp DateTime         @default(now())
  
  // Relations
  server    Server           @relation(fields: [serverId], references: [id], onDelete: Cascade)
  
  @@map("health_checks")
  @@index([serverId, timestamp])
}

model AlertRule {
  id          String      @id @default(cuid())
  name        String
  metricType  MetricType
  condition   String      // e.g., "greater_than", "less_than"
  threshold   Float
  severity    AlertSeverity
  enabled     Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@map("alert_rules")
}

enum ServerStatus {
  ONLINE
  OFFLINE
  UNKNOWN
  MAINTENANCE
}

enum MetricType {
  CPU_USAGE
  MEMORY_USAGE
  DISK_USAGE
  NETWORK_IN
  NETWORK_OUT
  LOAD_AVERAGE
  UPTIME
}

enum AlertType {
  HIGH_CPU
  HIGH_MEMORY
  HIGH_DISK
  SERVER_DOWN
  HIGH_LOAD
  CUSTOM
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum AlertStatus {
  ACTIVE
  RESOLVED
  ACKNOWLEDGED
}

enum HealthStatus {
  HEALTHY
  UNHEALTHY
  TIMEOUT
  ERROR
}
